# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bookreview_pb2 as bookreview__pb2


class bookreviewStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_review = channel.unary_unary(
                '/bookreview/create_review',
                request_serializer=bookreview__pb2.review.SerializeToString,
                response_deserializer=bookreview__pb2.review_reponse.FromString,
                )
        self.retrieve = channel.unary_unary(
                '/bookreview/retrieve',
                request_serializer=bookreview__pb2.retrieval.SerializeToString,
                response_deserializer=bookreview__pb2.retrieve_reponse.FromString,
                )
        self.query = channel.unary_unary(
                '/bookreview/query',
                request_serializer=bookreview__pb2.queries.SerializeToString,
                response_deserializer=bookreview__pb2.review.FromString,
                )


class bookreviewServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_review(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def retrieve(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_bookreviewServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_review': grpc.unary_unary_rpc_method_handler(
                    servicer.create_review,
                    request_deserializer=bookreview__pb2.review.FromString,
                    response_serializer=bookreview__pb2.review_reponse.SerializeToString,
            ),
            'retrieve': grpc.unary_unary_rpc_method_handler(
                    servicer.retrieve,
                    request_deserializer=bookreview__pb2.retrieval.FromString,
                    response_serializer=bookreview__pb2.retrieve_reponse.SerializeToString,
            ),
            'query': grpc.unary_unary_rpc_method_handler(
                    servicer.query,
                    request_deserializer=bookreview__pb2.queries.FromString,
                    response_serializer=bookreview__pb2.review.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bookreview', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class bookreview(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_review(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookreview/create_review',
            bookreview__pb2.review.SerializeToString,
            bookreview__pb2.review_reponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def retrieve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookreview/retrieve',
            bookreview__pb2.retrieval.SerializeToString,
            bookreview__pb2.retrieve_reponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookreview/query',
            bookreview__pb2.queries.SerializeToString,
            bookreview__pb2.review.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
