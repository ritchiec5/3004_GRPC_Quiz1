# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import template_pb2 as template__pb2


class templateStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.unary_rpc = channel.unary_unary(
                '/template/unary_rpc',
                request_serializer=template__pb2.HelloRequest.SerializeToString,
                response_deserializer=template__pb2.Goodbye_reply.FromString,
                )
        self.server_streaming_rpc = channel.unary_stream(
                '/template/server_streaming_rpc',
                request_serializer=template__pb2.HelloRequest.SerializeToString,
                response_deserializer=template__pb2.Goodbye_stream.FromString,
                )
        self.client_streaming_rpc = channel.stream_unary(
                '/template/client_streaming_rpc',
                request_serializer=template__pb2.HelloStream.SerializeToString,
                response_deserializer=template__pb2.Goodbye_reply.FromString,
                )
        self.bidirectional_streaming_rpc = channel.stream_stream(
                '/template/bidirectional_streaming_rpc',
                request_serializer=template__pb2.HelloStream.SerializeToString,
                response_deserializer=template__pb2.Goodbye_stream.FromString,
                )
        self.repeated_rpc = channel.unary_unary(
                '/template/repeated_rpc',
                request_serializer=template__pb2.HelloRepeated.SerializeToString,
                response_deserializer=template__pb2.Goodbye_reply.FromString,
                )


class templateServicer(object):
    """Missing associated documentation comment in .proto file."""

    def unary_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def server_streaming_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def client_streaming_rpc(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def bidirectional_streaming_rpc(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def repeated_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_templateServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'unary_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.unary_rpc,
                    request_deserializer=template__pb2.HelloRequest.FromString,
                    response_serializer=template__pb2.Goodbye_reply.SerializeToString,
            ),
            'server_streaming_rpc': grpc.unary_stream_rpc_method_handler(
                    servicer.server_streaming_rpc,
                    request_deserializer=template__pb2.HelloRequest.FromString,
                    response_serializer=template__pb2.Goodbye_stream.SerializeToString,
            ),
            'client_streaming_rpc': grpc.stream_unary_rpc_method_handler(
                    servicer.client_streaming_rpc,
                    request_deserializer=template__pb2.HelloStream.FromString,
                    response_serializer=template__pb2.Goodbye_reply.SerializeToString,
            ),
            'bidirectional_streaming_rpc': grpc.stream_stream_rpc_method_handler(
                    servicer.bidirectional_streaming_rpc,
                    request_deserializer=template__pb2.HelloStream.FromString,
                    response_serializer=template__pb2.Goodbye_stream.SerializeToString,
            ),
            'repeated_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.repeated_rpc,
                    request_deserializer=template__pb2.HelloRepeated.FromString,
                    response_serializer=template__pb2.Goodbye_reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'template', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class template(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def unary_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/template/unary_rpc',
            template__pb2.HelloRequest.SerializeToString,
            template__pb2.Goodbye_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def server_streaming_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/template/server_streaming_rpc',
            template__pb2.HelloRequest.SerializeToString,
            template__pb2.Goodbye_stream.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def client_streaming_rpc(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/template/client_streaming_rpc',
            template__pb2.HelloStream.SerializeToString,
            template__pb2.Goodbye_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def bidirectional_streaming_rpc(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/template/bidirectional_streaming_rpc',
            template__pb2.HelloStream.SerializeToString,
            template__pb2.Goodbye_stream.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def repeated_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/template/repeated_rpc',
            template__pb2.HelloRepeated.SerializeToString,
            template__pb2.Goodbye_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
